version: "3"

networks:
  kong-net:
    driver: bridge

services:
  #######################################
  # Postgres: The database used by Kong
  #######################################
  kong-database:
    image: postgres:9.6
    restart: always
    networks:
      - kong-net
    environment:
      POSTGRES_PASSWORD: kong
      POSTGRES_USER: kong
      POSTGRES_DB: kong
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 5s
      timeout: 5s
      retries: 5

  #######################################
  # Kong database migration
  #######################################
  kong-migration:
    image: kong:latest
    command: "kong migrations bootstrap"
    networks:
      - kong-net
    restart: on-failure
    environment:
      KONG_PG_HOST: kong-database
      KONG_DATABASE: postgres
      KONG_PG_PASSWORD: kong
    links:
      - kong-database
    depends_on:
      - kong-database

  #######################################
  # Kong: The API Gateway
  #######################################
  kong:
    image: kong:latest
    restart: always
    networks:
      - kong-net
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PROXY_LISTEN: 0.0.0.0:8000
      KONG_PROXY_LISTEN_SSL: 0.0.0.0:8443
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
    depends_on:
      - kong-migration
      - kong-database
    healthcheck:
      test: ["CMD", "curl", "-f", "http://kong:8001"]
      interval: 5s
      timeout: 2s
      retries: 15
    ports:
      - "8001:8001"
      - "8000:8000"

  #######################################
  # Konga database prepare
  #######################################
  konga-prepare:
    image: pantsel/konga:next
    command: "-c prepare -a postgres -u postgresql://kong:kong@kong-database:5432/konga_db"
    environment:
      DB_ADAPTER: postgres
      DB_HOST: kong-database
      DB_USER: kong
      DB_PASSWORD: kong
    networks:
      - kong-net
    restart: on-failure
    links:
      - kong-database
    depends_on:
      - kong-database

  #######################################
  # Konga: Kong GUI
  #######################################
  konga:
    image: pantsel/konga:next
    restart: always
    networks:
      - kong-net
    environment:
      DB_ADAPTER: postgres
      DB_HOST: kong-database
      DB_USER: kong
      DB_PASSWORD: kong
      TOKEN_SECRET: km1GUr4RkcQD7DewhJPNXrCuZwcKmqjb
      DB_DATABASE: konga_db
      NODE_ENV: production
    depends_on:
      - kong-database
    ports:
      - "1337:1337"
# version: "3.7"

# services:
#   kong-database:
#     image: postgres:${POSTGRES_VERSION:-latest}
#     container_name: kong-database
#     environment:
#       - POSTGRES_USER=${POSTGRES_USER:-kong}
#       - POSTGRES_DB=${POSTGRES_DB:-kong}
#       - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-kong}
#     volumes:
#       - ./pg_data:/var/lib/postgresql/data
#     restart: always
#     healthcheck:
#       test: ["CMD-SHELL", "pg_isready -U postgres"]
#       interval: 10s
#       timeout: 5s
#       retries: 5

#   kong:
#     depends_on:
#       - kong-database
#     image: "${KONG_DOCKER_TAG:-kong:latest}"
#     command: kong migrations bootstrap
#     container_name: kong
#     restart: always
#     environment:
#       - TZ=${TZ:-Asia/Bangkok}
#       - KONG_DATABASE=postgres
#       - KONG_PG_HOST=${KONG_PG_HOST:-kong-database}
#       - KONG_PG_DATABASE=${POSTGRES_DB:-kong}
#       - KONG_PG_USER=${POSTGRES_USER:-kong}
#       - KONG_PG_PASSWORD=${POSTGRES_PASSWORD:-kong}
#       - KONG_ADMIN_LISTEN=${KONG_ADMIN_LISTEN:-127.0.0.1:8001}
#       - KONG_PROXY_LISTEN=${KONG_PROXY_LISTEN:-0.0.0.0:8000, 0.0.0.0:8443 ssl http2}
#       - KONG_NGINX_HTTP_RESOLVER=${KONG_NGINX_HTTP_RESOLVER:-8.8.8.8}
#       - KONG_PROXY_ERROR_LOG=/dev/stderr
#       - KONG_ADMIN_ERROR_LOG=/dev/stderr
#       - KONG_TRUSTED_IPS=0.0.0.0/0,::/0
#       - KONG_REAL_IP_RECURSIVE=on
#     ports:
#       - 80:8000
#       - 443:8443
#       - 127.0.0.1:8001:8001
#     healthcheck:
#       test: ["CMD", "kong", "health"]
#       interval: 5s
#       timeout: 2s
#       retries: 15

#   # https://github.com/pantsel/konga/issues/462#issuecomment-633209833
#   konga:
#     image: pantsel/konga
#     container_name: konga
#     restart: always
#     environment:
#       # For use build-in filesystem db,
#       # Konga creator said `I've done it with no problems on production environments.`
#       # But the default `sails-disk` adapter is not designed for use as a production database;
#       - NODE_ENV=development
#     ports:
#       - 127.0.0.1:1337:1337
#     volumes:
#       - ./konga_data:/app/kongadata

# version: "3.8"

# x-kong-config: &kong-env
#   KONG_DATABASE: ${KONG_DATABASE:-off}
#   KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
#   KONG_PG_HOST: db
#   KONG_PG_USER: ${KONG_PG_USER:-kong}
#   KONG_PG_PASSWORD_FILE: /run/secrets/kong_postgres_password

# volumes:
#   kong_data: {}
#   kong_prefix_vol:
#     driver_opts:
#       type: tmpfs
#       device: tmpfs
#   kong_tmp_vol:
#     driver_opts:
#       type: tmpfs
#       device: tmpfs

# networks:
#   kong-net:
#     external: false

# services:
#   kong-migrations:
#     image: "${KONG_DOCKER_TAG:-kong:latest}"
#     command: kong migrations bootstrap
#     profiles: ["database"]
#     depends_on:
#       - db
#     environment:
#       <<: *kong-env
#     secrets:
#       - kong_postgres_password
#     networks:
#       - kong-net
#     restart: on-failure

#   kong-migrations-up:
#     image: "${KONG_DOCKER_TAG:-kong:latest}"
#     command: kong migrations up && kong migrations finish
#     profiles: ["database"]
#     depends_on:
#       - db
#     environment:
#       <<: *kong-env
#     secrets:
#       - kong_postgres_password
#     networks:
#       - kong-net
#     restart: on-failure

#   kong:
#     image: "${KONG_DOCKER_TAG:-kong:latest}"
#     user: "${KONG_USER:-kong}"
#     environment:
#       <<: *kong-env
#       KONG_ADMIN_ACCESS_LOG: /dev/stdout
#       KONG_ADMIN_ERROR_LOG: /dev/stderr
#       KONG_PROXY_LISTEN: "${KONG_PROXY_LISTEN:-0.0.0.0:8000}"
#       KONG_ADMIN_LISTEN: "${KONG_ADMIN_LISTEN:-0.0.0.0:8001}"
#       KONG_PROXY_ACCESS_LOG: /dev/stdout
#       KONG_PROXY_ERROR_LOG: /dev/stderr
#       KONG_PREFIX: ${KONG_PREFIX:-/var/run/kong}
#       KONG_DECLARATIVE_CONFIG: "/opt/kong/kong.yaml"
#     secrets:
#       - kong_postgres_password
#     networks:
#       - kong-net
#     ports:
#       # The following two environment variables default to an insecure value (0.0.0.0)
#       # according to the CIS Security test.
#       - "${KONG_INBOUND_PROXY_LISTEN:-0.0.0.0}:8000:8000/tcp"
#       - "${KONG_INBOUND_SSL_PROXY_LISTEN:-0.0.0.0}:8443:8443/tcp"
#       # Making them mandatory but undefined, like so would be backwards-breaking:
#       # - "${KONG_INBOUND_PROXY_LISTEN?Missing inbound proxy host}:8000:8000/tcp"
#       # - "${KONG_INBOUND_SSL_PROXY_LISTEN?Missing inbound proxy ssl host}:8443:8443/tcp"
#       # Alternative is deactivating check 5.13 in the security bench, if we consider Kong's own config to be enough security here

#       - "127.0.0.1:8001:8001/tcp"
#       - "127.0.0.1:8444:8444/tcp"
#     healthcheck:
#       test: ["CMD", "kong", "health"]
#       interval: 10s
#       timeout: 10s
#       retries: 10
#     restart: on-failure:5
#     read_only: true
#     volumes:
#       - kong_prefix_vol:${KONG_PREFIX:-/var/run/kong}
#       - kong_tmp_vol:/tmp
#       - ./config:/opt/kong
#     security_opt:
#       - no-new-privileges

#   db:
#     image: postgres:9.5
#     profiles: ["database"]
#     environment:
#       POSTGRES_DB: ${KONG_PG_DATABASE:-kong}
#       POSTGRES_USER: ${KONG_PG_USER:-kong}
#       POSTGRES_PASSWORD_FILE: /run/secrets/kong_postgres_password
#     secrets:
#       - kong_postgres_password
#     healthcheck:
#       test: ["CMD", "pg_isready", "-U", "${KONG_PG_USER:-kong}"]
#       interval: 30s
#       timeout: 30s
#       retries: 3
#     restart: on-failure
#     stdin_open: true
#     tty: true
#     networks:
#       - kong-net
#     volumes:
#       - kong_data:/var/lib/postgresql/data

# secrets:
#   kong_postgres_password:
#     file: ./POSTGRES_PASSWORD

# version: "3.7"
# volumes:
#   kong_data: {}

# networks:
#   kong-net:
# services:
#   #######################################
#   # Postgres: The database used by Kong
#   #######################################
#   kong-database:
#     image: postgres:9.6
#     container_name: kong-postgres
#     restart: on-failure
#     networks:
#       - kong-net
#     volumes:
#       - kong_data:/var/lib/postgresql/data
#     environment:
#       POSTGRES_USER: kong
#       POSTGRES_PASSWORD: ${KONG_PG_PASSWORD:-kong}
#       POSTGRES_DB: kong
#     ports:
#       - "5432:5432"
#     healthcheck:
#       test: ["CMD", "pg_isready", "-U", "kong"]
#       interval: 30s
#       timeout: 30s
#       retries: 3
#   #######################################
#   # Kong database migration
#   #######################################
#   kong-migration:
#     image: ${KONG_DOCKER_TAG:-kong:latest}
#     command: kong migrations bootstrap
#     networks:
#       - kong-net
#     restart: on-failure
#     environment:
#       KONG_DATABASE: postgres
#       KONG_PG_HOST: kong-database
#       KONG_PG_DATABASE: kong
#       KONG_PG_USER: kong
#       KONG_PG_PASSWORD: ${KONG_PG_PASSWORD:-kong}
#     depends_on:
#       - kong-database
#   #######################################
#   # Kong: The API Gateway
#   #######################################
#   kong:
#     image: ${KONG_DOCKER_TAG:-kong:latest}
#     restart: on-failure
#     networks:
#       - kong-net
#     environment:
#       KONG_DATABASE: postgres
#       KONG_PG_HOST: kong-database
#       KONG_PG_DATABASE: kong
#       KONG_PG_USER: kong
#       KONG_PG_PASSWORD: ${KONG_PG_PASSWORD:-kong}
#       KONG_PROXY_LISTEN: 0.0.0.0:8000
#       KONG_PROXY_LISTEN_SSL: 0.0.0.0:8443
#       KONG_ADMIN_LISTEN: 0.0.0.0:8001
#     depends_on:
#       - kong-database
#     healthcheck:
#       test: ["CMD", "curl", "-f", "http://kong:8001"]
#       interval: 5s
#       timeout: 2s
#       retries: 15
#     ports:
#       - "8000:8000"
#       - "8001:8001"
#       - "8443:8443"
#       - "8444:8444"
#   #######################################
#   # Konga database prepare
#   #######################################
#   konga-prepare:
#     image: pantsel/konga:latest
#     command: "-c prepare -a postgres -u postgresql://kong:${KONG_PG_PASSWORD:-kong}@kong-database:5432/konga"
#     networks:
#       - kong-net
#     restart: on-failure
#     depends_on:
#       - kong-database
#   #######################################
#   # Konga: Kong GUI
#   #######################################
#   #   # https://github.com/pantsel/konga/issues/462#issuecomment-633209833
#   konga:
#     image: pantsel/konga
#     container_name: konga
#     restart: always
#     environment:
#       # For use build-in filesystem db,
#       # Konga creator said `I've done it with no problems on production environments.`
#       # But the default `sails-disk` adapter is not designed for use as a production database;
#       - NODE_ENV=development
#     ports:
#       - 127.0.0.1:1337:1337
#     volumes:
#       - ./konga_data:/app/kongadata
